{"ast":null,"code":"export async function client(endpoint, {\n  body,\n  ...customConfig\n} = {}) {\n  const config = {\n    method: \"GET\",\n    ...customConfig,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...customConfig.headers\n    }\n  };\n\n  try {\n    const response = await fetch(endpoint, config);\n\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig,\n    method: \"GET\"\n  });\n};\n\nexport function galleryIsLoaded() {\n  setTimeout(() => {\n    document.querySelector(\".gallery-loading-container\").classList.add(\"hide\");\n    document.querySelector(\".gallery-container\").classList.remove(\"hide\");\n    document.querySelector(\".gallery-pagination-controls--container\").classList.remove(\"hide\");\n  }, 500);\n}\nexport function galleryNotLoaded() {\n  document.querySelector(\".gallery-loading-container\").classList.remove(\"hide\");\n  document.querySelector(\".gallery-container\").classList.add(\"hide\");\n  document.querySelector(\".gallery-pagination-controls--container\").classList.add(\"hide\");\n}\nexport function galleryFetched(images, paginateState, setGalleryState) {\n  const startImg = (paginateState.page - 1) * paginateState.size;\n  const endImg = startImg + paginateState.size;\n  const currentImages = images.slice(startImg, endImg);\n  setGalleryState({\n    images: images,\n    current: currentImages,\n    total: images.length\n  });\n  galleryIsLoaded();\n}","map":{"version":3,"sources":["/Users/steve/Projects/FED Intern Application/image-share-app/src/functions/galleryFunctions.js"],"names":["client","endpoint","body","customConfig","config","method","headers","response","fetch","ok","Error","statusText","json","err","console","log","get","galleryIsLoaded","setTimeout","document","querySelector","classList","add","remove","galleryNotLoaded","galleryFetched","images","paginateState","setGalleryState","startImg","page","size","endImg","currentImages","slice","current","total","length"],"mappings":"AAAA,OAAO,eAAeA,MAAf,CAAsBC,QAAtB,EAAgC;AAAEC,EAAAA,IAAF;AAAQ,KAAGC;AAAX,IAA4B,EAA5D,EAAgE;AACrE,QAAMC,MAAM,GAAG;AACbC,IAAAA,MAAM,EAAE,KADK;AAEb,OAAGF,YAFU;AAGbG,IAAAA,OAAO,EAAE;AACP,sBAAgB,kBADT;AAEP,SAAGH,YAAY,CAACG;AAFT;AAHI,GAAf;;AASA,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,QAAD,EAAWG,MAAX,CAA5B;;AACA,QAAI,CAACG,QAAQ,CAACE,EAAd,EAAkB;AAChB,YAAM,IAAIC,KAAJ,CAAUH,QAAQ,CAACI,UAAnB,CAAN;AACD;;AACD,WAAO,MAAMJ,QAAQ,CAACK,IAAT,EAAb;AACD,GAND,CAME,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF;;AAEDb,MAAM,CAACgB,GAAP,GAAa,UAAUf,QAAV,EAAoBE,YAAY,GAAG,EAAnC,EAAuC;AAClD,SAAOH,MAAM,CAACC,QAAD,EAAW,EAAE,GAAGE,YAAL;AAAmBE,IAAAA,MAAM,EAAE;AAA3B,GAAX,CAAb;AACD,CAFD;;AAIA,OAAO,SAASY,eAAT,GAA2B;AAChCC,EAAAA,UAAU,CAAC,MAAM;AACfC,IAAAA,QAAQ,CAACC,aAAT,CAAuB,4BAAvB,EAAqDC,SAArD,CAA+DC,GAA/D,CAAmE,MAAnE;AACAH,IAAAA,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,EAA6CC,SAA7C,CAAuDE,MAAvD,CAA8D,MAA9D;AACAJ,IAAAA,QAAQ,CACLC,aADH,CACiB,yCADjB,EAEGC,SAFH,CAEaE,MAFb,CAEoB,MAFpB;AAGD,GANS,EAMP,GANO,CAAV;AAOD;AAED,OAAO,SAASC,gBAAT,GAA4B;AACjCL,EAAAA,QAAQ,CAACC,aAAT,CAAuB,4BAAvB,EAAqDC,SAArD,CAA+DE,MAA/D,CAAsE,MAAtE;AACAJ,EAAAA,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,EAA6CC,SAA7C,CAAuDC,GAAvD,CAA2D,MAA3D;AACAH,EAAAA,QAAQ,CACLC,aADH,CACiB,yCADjB,EAEGC,SAFH,CAEaC,GAFb,CAEiB,MAFjB;AAGD;AAED,OAAO,SAASG,cAAT,CAAwBC,MAAxB,EAAgCC,aAAhC,EAA+CC,eAA/C,EAAgE;AACrE,QAAMC,QAAQ,GAAG,CAACF,aAAa,CAACG,IAAd,GAAqB,CAAtB,IAA2BH,aAAa,CAACI,IAA1D;AACA,QAAMC,MAAM,GAAGH,QAAQ,GAAGF,aAAa,CAACI,IAAxC;AACA,QAAME,aAAa,GAAGP,MAAM,CAACQ,KAAP,CAAaL,QAAb,EAAuBG,MAAvB,CAAtB;AAEAJ,EAAAA,eAAe,CAAC;AACdF,IAAAA,MAAM,EAAEA,MADM;AAEdS,IAAAA,OAAO,EAAEF,aAFK;AAGdG,IAAAA,KAAK,EAAEV,MAAM,CAACW;AAHA,GAAD,CAAf;AAKApB,EAAAA,eAAe;AAChB","sourcesContent":["export async function client(endpoint, { body, ...customConfig } = {}) {\n  const config = {\n    method: \"GET\",\n    ...customConfig,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...customConfig.headers,\n    },\n  };\n\n  try {\n    const response = await fetch(endpoint, config);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: \"GET\" });\n};\n\nexport function galleryIsLoaded() {\n  setTimeout(() => {\n    document.querySelector(\".gallery-loading-container\").classList.add(\"hide\");\n    document.querySelector(\".gallery-container\").classList.remove(\"hide\");\n    document\n      .querySelector(\".gallery-pagination-controls--container\")\n      .classList.remove(\"hide\");\n  }, 500);\n}\n\nexport function galleryNotLoaded() {\n  document.querySelector(\".gallery-loading-container\").classList.remove(\"hide\");\n  document.querySelector(\".gallery-container\").classList.add(\"hide\");\n  document\n    .querySelector(\".gallery-pagination-controls--container\")\n    .classList.add(\"hide\");\n}\n\nexport function galleryFetched(images, paginateState, setGalleryState) {\n  const startImg = (paginateState.page - 1) * paginateState.size;\n  const endImg = startImg + paginateState.size;\n  const currentImages = images.slice(startImg, endImg);\n\n  setGalleryState({\n    images: images,\n    current: currentImages,\n    total: images.length,\n  });\n  galleryIsLoaded();\n}\n"]},"metadata":{},"sourceType":"module"}