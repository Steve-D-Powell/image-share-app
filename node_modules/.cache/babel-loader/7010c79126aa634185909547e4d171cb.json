{"ast":null,"code":"var _jsxFileName = \"/Users/steve/Projects/FED Intern Application/image-share-app/src/components/Gallery.js\",\n    _s = $RefreshSig$();\n\nimport \"../css/Gallery.css\";\nimport GalleryImage from \"./GaleryImage\";\nimport { useState, useEffect } from \"react\";\nimport Pagination from \"react-pagination-js\";\nimport \"react-pagination-js/dist/styles.css\";\nimport Select from \"./Select\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Gallery = props => {\n  _s();\n\n  const [galleryImages, setGalleryImages] = useState([]);\n  const [currentImages, setCurrentImages] = useState([]);\n  const [totalImages, setTotalImages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sizePerPage, setSizePerPage] = useState(10);\n  useEffect(() => {\n    console.log(\"Updated the Gallery\");\n\n    async function getTotalImages() {\n      try {\n        const response = await fetch(props.galleryUrl);\n\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        return await response.json();\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    getTotalImages().then(data => {\n      if (data !== undefined) {\n        setTotalImages(data.photos.length);\n        setGalleryImages(data.photos);\n        setCurrentImages(data.photos.slice(1, 10));\n      }\n    });\n  }, [props.galleryUrl]);\n  useEffect(() => {\n    console.log(\"Reloaded the Gallery\");\n\n    const updateImages = () => {\n      const startImg = currentPage * sizePerPage;\n      const endImg = startImg + sizePerPage;\n      setCurrentImages(galleryImages.slice(startImg, endImg));\n      console.log(\"Current: \", currentImages);\n    };\n\n    updateImages();\n  }, [currentPage, sizePerPage]);\n\n  const selectNumImages = num => {\n    console.log(\"num: \", num);\n    setSizePerPage(num);\n  };\n\n  const changeCurrentPage = numPage => {\n    setCurrentPage(numPage);\n  };\n\n  if (currentImages === \"unloaded\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No Images Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      selectNumImages: selectNumImages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: currentImages.map((image, index) => /*#__PURE__*/_jsxDEV(GalleryImage, {\n        index: index,\n        imageObj: image\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      changeCurrentPage: changeCurrentPage,\n      totalSize: totalImages,\n      sizePerPage: sizePerPage,\n      theme: \"dark\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"current Page:\", currentPage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Gallery, \"g6cVYouStU9sHlRmqAd6I9H5eWg=\");\n\n_c = Gallery;\nexport default Gallery;\n\nvar _c;\n\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"sources":["/Users/steve/Projects/FED Intern Application/image-share-app/src/components/Gallery.js"],"names":["GalleryImage","useState","useEffect","Pagination","Select","Gallery","props","galleryImages","setGalleryImages","currentImages","setCurrentImages","totalImages","setTotalImages","currentPage","setCurrentPage","sizePerPage","setSizePerPage","console","log","getTotalImages","response","fetch","galleryUrl","ok","Error","statusText","json","err","then","data","undefined","photos","length","slice","updateImages","startImg","endImg","selectNumImages","num","changeCurrentPage","numPage","map","image","index"],"mappings":"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","sourcesContent":["import \"../css/Gallery.css\";\nimport GalleryImage from \"./GaleryImage\";\nimport { useState, useEffect } from \"react\";\nimport Pagination from \"react-pagination-js\";\nimport \"react-pagination-js/dist/styles.css\";\nimport Select from \"./Select\";\n\nconst Gallery = (props) => {\n  const [galleryImages, setGalleryImages] = useState([]);\n  const [currentImages, setCurrentImages] = useState([]);\n  const [totalImages, setTotalImages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sizePerPage, setSizePerPage] = useState(10);\n\n  useEffect(() => {\n    console.log(\"Updated the Gallery\");\n    async function getTotalImages() {\n      try {\n        const response = await fetch(props.galleryUrl);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        return await response.json();\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    getTotalImages().then((data) => {\n      if (data !== undefined) {\n        setTotalImages(data.photos.length);\n        setGalleryImages(data.photos);\n        setCurrentImages(data.photos.slice(1, 10));\n      }\n    });\n  }, [props.galleryUrl]);\n\n  useEffect(() => {\n    console.log(\"Reloaded the Gallery\");\n\n    const updateImages = () => {\n      const startImg = currentPage * sizePerPage;\n      const endImg = startImg + sizePerPage;\n\n      setCurrentImages(galleryImages.slice(startImg, endImg));\n      console.log(\"Current: \", currentImages);\n    };\n    updateImages();\n  }, [currentPage, sizePerPage]);\n\n  const selectNumImages = (num) => {\n    console.log(\"num: \", num);\n    setSizePerPage(num);\n  };\n\n  const changeCurrentPage = (numPage) => {\n    setCurrentPage(numPage);\n  };\n\n  if (currentImages === \"unloaded\") {\n    return <div>No Images Found</div>;\n  }\n\n  return (\n    <>\n      <Select selectNumImages={selectNumImages} />\n      <div className=\"grid-container\">\n        {currentImages.map((image, index) => (\n          <GalleryImage key={index} index={index} imageObj={image} />\n        ))}\n      </div>\n      <Pagination\n        currentPage={currentPage}\n        changeCurrentPage={changeCurrentPage}\n        totalSize={totalImages}\n        sizePerPage={sizePerPage}\n        theme=\"dark\"\n      />\n      <h2>current Page:{currentPage}</h2>\n    </>\n  );\n};\n\nexport default Gallery;\n"]},"metadata":{},"sourceType":"module"}