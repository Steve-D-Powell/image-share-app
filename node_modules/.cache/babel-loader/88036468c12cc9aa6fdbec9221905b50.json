{"ast":null,"code":"var _jsxFileName = \"/Users/steve/Projects/FED Intern Application/image-share-app/src/components/SignInScreen.js\";\n// Import FirebaseAuth and firebase.\nimport React from \"react\";\nimport * as firebase from \"firebase/app\"; // Configure FirebaseUI.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: \"/signedIn\",\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [app.auth.EmailAuthProvider.PROVIDER_ID]\n};\n\nfunction SignInScreen() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please sign-in:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledFirebaseAuth, {\n      uiConfig: uiConfig,\n      firebaseAuth: firebase.auth()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SignInScreen;\nexport default SignInScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"SignInScreen\");","map":{"version":3,"sources":["/Users/steve/Projects/FED Intern Application/image-share-app/src/components/SignInScreen.js"],"names":["React","firebase","uiConfig","signInFlow","signInSuccessUrl","signInOptions","app","auth","EmailAuthProvider","PROVIDER_ID","SignInScreen"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,QAAZ,MAA0B,cAA1B,C,CAEA;;;AACA,MAAMC,QAAQ,GAAG;AACf;AACAC,EAAAA,UAAU,EAAE,OAFG;AAGf;AACAC,EAAAA,gBAAgB,EAAE,WAJH;AAKf;AACAC,EAAAA,aAAa,EAAE,CAACC,GAAG,CAACC,IAAJ,CAASC,iBAAT,CAA2BC,WAA5B;AANA,CAAjB;;AASA,SAASC,YAAT,GAAwB;AACtB,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,kBAAD;AAAoB,MAAA,QAAQ,EAAER,QAA9B;AAAwC,MAAA,YAAY,EAAED,QAAQ,CAACM,IAAT;AAAtD;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;KARQG,Y;AAUT,eAAeA,YAAf","sourcesContent":["// Import FirebaseAuth and firebase.\nimport React from \"react\";\nimport * as firebase from \"firebase/app\";\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: \"popup\",\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  signInSuccessUrl: \"/signedIn\",\n  // We will display Google and Facebook as auth providers.\n  signInOptions: [app.auth.EmailAuthProvider.PROVIDER_ID],\n};\n\nfunction SignInScreen() {\n  return (\n    <div>\n      <h1>My App</h1>\n      <p>Please sign-in:</p>\n      <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />\n    </div>\n  );\n}\n\nexport default SignInScreen;\n"]},"metadata":{},"sourceType":"module"}