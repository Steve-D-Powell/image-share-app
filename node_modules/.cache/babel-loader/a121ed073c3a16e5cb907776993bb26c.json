{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport BaseReactCustomElement from './BaseReactCustomElement';\n\nvar createReactCustomElement = function createReactCustomElement(Component) {\n  var useShadowDOM = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return /*#__PURE__*/function (_BaseReactCustomEleme) {\n    _inherits(ReactCustomElement, _BaseReactCustomEleme);\n\n    var _super = _createSuper(ReactCustomElement);\n    /*\n     * Mounting point for react App.\n     * If shadow DOM is not polyfilled and usable, will be the shadowRoot.\n     * If not, will be the component itself.\n     *\n     */\n\n\n    function ReactCustomElement() {\n      var _this;\n\n      _classCallCheck(this, ReactCustomElement);\n\n      _this = _super.call(this);\n      _this.renderRoot = _this.createRenderRoot();\n      return _this;\n    }\n\n    _createClass(ReactCustomElement, [{\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        this.renderApp();\n      }\n    }, {\n      key: \"renderApp\",\n      value: function renderApp() {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Component, {\n          renderRoot: this.renderRoot\n        }), this.renderRoot);\n      }\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        ReactDOM.unmountComponentAtNode(this.renderRoot);\n      }\n    }, {\n      key: \"createRenderRoot\",\n      value: function createRenderRoot() {\n        if (!useShadowDOM) {\n          return this;\n        } // If Shadow DOM is polyfilled, always render react app in light DOM.\n\n\n        if (window.ShadyDOM) {\n          return this;\n        }\n\n        return this.attachShadow({\n          mode: 'open'\n        });\n      }\n    }]);\n\n    return ReactCustomElement;\n  }(BaseReactCustomElement);\n};\n\nexport default createReactCustomElement;","map":{"version":3,"sources":["../src/ReactCustomElement.tsx"],"names":["createReactCustomElement","useShadowDOM","ReactDOM","renderRoot","window","mode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,QAAA,MAAA,WAAA;AACA,OAAA,sBAAA,MAAA,0BAAA;;AAEA,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAA,SAAA,EAGG;AAAA,MADlCC,YACkC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GADnB,IACmB;AAClC,SAAA,aAAA,UAAA,qBAAA,EAAA;AAAA,IAAA,SAAA,CAAA,kBAAA,EAAA,qBAAA,CAAA;;AAAA,QAAA,MAAA,GAAA,YAAA,CAAA,kBAAA,CAAA;AACE;AACJ;AACA;AACA;AACA;AACA;;;AAGI,aAAA,kBAAA,GAAqB;AAAA,UAAA,KAAA;;AAAA,MAAA,eAAA,CAAA,IAAA,EAAA,kBAAA,CAAA;;AACnB,MAAA,KAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACA,MAAA,KAAA,CAAA,UAAA,GAAkB,KAAA,CAAlB,gBAAkB,EAAlB;AAFmB,aAAA,KAAA;AAGpB;;AAZH,IAAA,YAAA,CAAA,kBAAA,EAAA,CAAA;AAAA,MAAA,GAAA,EAAA,mBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,iBAAA,GAc6B;AACzB,aAAA,SAAA;AACD;AAhBH,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,WAAA;AAAA,MAAA,KAAA,EAAA,SAAA,SAAA,GAkBqB;AACjBC,QAAAA,QAAQ,CAARA,MAAAA,EAAAA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA;AAAW,UAAA,UAAU,EAAE,KAAKC;AAA5B,SAAA,CADFD,EAEE,KAFFA,UAAAA;AAID;AAvBH,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,sBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,oBAAA,GAyBgC;AAC5BA,QAAAA,QAAQ,CAARA,sBAAAA,CAAgC,KAAhCA,UAAAA;AACD;AA3BH,KAAA,EAAA;AAAA,MAAA,GAAA,EAAA,kBAAA;AAAA,MAAA,KAAA,EAAA,SAAA,gBAAA,GA6BmD;AAC/C,YAAI,CAAJ,YAAA,EAAmB;AACjB,iBAAA,IAAA;AAF6C,SAAA,CAK/C;;;AACA,YAAKE,MAAD,CAAJ,QAAA,EAA8B;AAC5B,iBAAA,IAAA;AACD;;AAED,eAAO,KAAA,YAAA,CAAkB;AAACC,UAAAA,IAAI,EAAE;AAAP,SAAlB,CAAP;AACD;AAxCH,KAAA,CAAA,CAAA;;AAAA,WAAA,kBAAA;AAAA,GAAA,CAAA,sBAAA,CAAA;AAJF,CAAA;;AAgDA,eAAA,wBAAA","sourcesContent":["import React, { ComponentType } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport BaseReactCustomElement from './BaseReactCustomElement';\n\nconst createReactCustomElement = (\n  Component: ComponentType<any>,\n  useShadowDOM = true\n): typeof BaseReactCustomElement => {\n  return class ReactCustomElement extends BaseReactCustomElement {\n    /*\n     * Mounting point for react App.\n     * If shadow DOM is not polyfilled and usable, will be the shadowRoot.\n     * If not, will be the component itself.\n     *\n     */\n    protected renderRoot: Element|DocumentFragment;\n\n    public constructor() {\n      super();\n      this.renderRoot = this.createRenderRoot();\n    }\n\n    public connectedCallback() {\n      this.renderApp();\n    }\n\n    public renderApp() {\n      ReactDOM.render(\n        <Component renderRoot={this.renderRoot} />,\n        this.renderRoot as Element\n      );\n    }\n\n    public disconnectedCallback() {\n      ReactDOM.unmountComponentAtNode(this.renderRoot as Element);\n    }\n\n    protected createRenderRoot(): Element|ShadowRoot {\n      if (!useShadowDOM) {\n        return this;\n      }\n\n      // If Shadow DOM is polyfilled, always render react app in light DOM.\n      if ((window as any).ShadyDOM) {\n        return this;\n      }\n\n      return this.attachShadow({mode: 'open'});\n    }\n  };\n};\n\nexport default createReactCustomElement;\n"]},"metadata":{},"sourceType":"module"}