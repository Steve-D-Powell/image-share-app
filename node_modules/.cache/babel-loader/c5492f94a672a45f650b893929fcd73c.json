{"ast":null,"code":"var _jsxFileName = \"/Users/steve/Projects/FED Intern Application/image-share-app/src/components/Gallery.js\",\n    _s = $RefreshSig$();\n\nimport \"../css/Gallery.css\";\nimport GalleryImage from \"./GaleryImage\";\nimport { useState, useEffect } from \"react\";\nimport Pagination from \"react-pagination-js\";\nimport \"react-pagination-js/dist/styles.css\";\nimport Select from \"./Select\";\nimport { SRLWrapper } from \"simple-react-lightbox-pro\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Gallery = ({\n  galleryUrls\n}) => {\n  _s();\n\n  console.log(\"Gallery Rendered\");\n  let params = useParams();\n  let initialGalleryUrl = galleryUrls[params.gallery.replace(\"-\", \"_\")];\n  const [galleryUrl, setGalleryUrl] = useState(initialGalleryUrl);\n  const [galleryImages, setGalleryImages] = useState([]);\n  const [currentImages, setCurrentImages] = useState([]);\n  const [totalImages, setTotalImages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sizePerPage, setSizePerPage] = useState(10);\n  const numberofImages = [{\n    name: \"10 Images\",\n    value: \"10\"\n  }, {\n    name: \"20 Images\",\n    value: \"20\"\n  }, {\n    name: \"30 Images\",\n    value: \"30\"\n  }, {\n    name: \"40 Images\",\n    value: \"40\"\n  }, {\n    name: \"50 Images\",\n    value: \"50\"\n  }];\n  useEffect(() => {\n    console.log(\"Updated the Gallery\");\n\n    if (galleryUrl) {\n      async function getTotalImages() {\n        try {\n          const response = await fetch(galleryUrl);\n\n          if (!response.ok) {\n            throw new Error(response.statusText);\n          }\n\n          return await response.json();\n        } catch (err) {\n          console.log(err);\n        }\n      }\n\n      getTotalImages().then(data => {\n        if (data !== undefined) {\n          let images = data.photos ? data.photos : data;\n          setTotalImages(images.length);\n          setCurrentImages(images.slice(0, 10));\n        }\n      });\n    }\n  }, [galleryUrl]);\n  useEffect(() => {\n    console.log(\"Reloaded the Gallery\");\n\n    const updateImages = () => {\n      const startImg = (currentPage - 1) * sizePerPage;\n      const endImg = startImg + sizePerPage;\n      setCurrentImages(galleryImages.slice(startImg, endImg));\n    };\n\n    updateImages();\n  }, [currentPage, sizePerPage, galleryImages]);\n\n  if (currentImages === \"unloaded\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No Images Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid-container\",\n      children: /*#__PURE__*/_jsxDEV(SRLWrapper, {\n        children: currentImages.map((image, index) => /*#__PURE__*/_jsxDEV(GalleryImage, {\n          index: index,\n          imageObj: image\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Gallery, \"1z4PWpawry3K9mpeaBg6bEOq0N4=\", false, function () {\n  return [useParams];\n});\n\n_c = Gallery;\nexport default Gallery;\n\nvar _c;\n\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"sources":["/Users/steve/Projects/FED Intern Application/image-share-app/src/components/Gallery.js"],"names":["GalleryImage","useState","useEffect","Pagination","Select","SRLWrapper","useParams","Gallery","galleryUrls","console","log","params","initialGalleryUrl","gallery","replace","galleryUrl","setGalleryUrl","galleryImages","setGalleryImages","currentImages","setCurrentImages","totalImages","setTotalImages","currentPage","setCurrentPage","sizePerPage","setSizePerPage","numberofImages","name","value","getTotalImages","response","fetch","ok","Error","statusText","json","err","then","data","undefined","images","photos","length","slice","updateImages","startImg","endImg","map","image","index"],"mappings":"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","sourcesContent":["import \"../css/Gallery.css\";\nimport GalleryImage from \"./GaleryImage\";\nimport { useState, useEffect } from \"react\";\nimport Pagination from \"react-pagination-js\";\nimport \"react-pagination-js/dist/styles.css\";\nimport Select from \"./Select\";\nimport { SRLWrapper } from \"simple-react-lightbox-pro\";\nimport { useParams } from \"react-router-dom\";\n\nconst Gallery = ({ galleryUrls }) => {\n  console.log(\"Gallery Rendered\");\n  let params = useParams();\n  let initialGalleryUrl = galleryUrls[params.gallery.replace(\"-\", \"_\")];\n\n  const [galleryUrl, setGalleryUrl] = useState(initialGalleryUrl);\n  const [galleryImages, setGalleryImages] = useState([]);\n  const [currentImages, setCurrentImages] = useState([]);\n  const [totalImages, setTotalImages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sizePerPage, setSizePerPage] = useState(10);\n  const numberofImages = [\n    {\n      name: \"10 Images\",\n      value: \"10\",\n    },\n    {\n      name: \"20 Images\",\n      value: \"20\",\n    },\n    {\n      name: \"30 Images\",\n      value: \"30\",\n    },\n    {\n      name: \"40 Images\",\n      value: \"40\",\n    },\n    {\n      name: \"50 Images\",\n      value: \"50\",\n    },\n  ];\n\n  useEffect(() => {\n    console.log(\"Updated the Gallery\");\n    if (galleryUrl) {\n      async function getTotalImages() {\n        try {\n          const response = await fetch(galleryUrl);\n          if (!response.ok) {\n            throw new Error(response.statusText);\n          }\n          return await response.json();\n        } catch (err) {\n          console.log(err);\n        }\n      }\n      getTotalImages().then((data) => {\n        if (data !== undefined) {\n          let images = data.photos ? data.photos : data;\n\n          setTotalImages(images.length);\n\n          setCurrentImages(images.slice(0, 10));\n        }\n      });\n    }\n  }, [galleryUrl]);\n\n  useEffect(() => {\n    console.log(\"Reloaded the Gallery\");\n\n    const updateImages = () => {\n      const startImg = (currentPage - 1) * sizePerPage;\n      const endImg = startImg + sizePerPage;\n\n      setCurrentImages(galleryImages.slice(startImg, endImg));\n    };\n    updateImages();\n  }, [currentPage, sizePerPage, galleryImages]);\n\n  if (currentImages === \"unloaded\") {\n    return <div>No Images Found</div>;\n  }\n\n  return (\n    <>\n      <div className=\"grid-container\">\n        <SRLWrapper>\n          {currentImages.map((image, index) => (\n            <GalleryImage key={index} index={index} imageObj={image} />\n          ))}\n        </SRLWrapper>\n      </div>\n    </>\n  );\n};\n\nexport default Gallery;\n"]},"metadata":{},"sourceType":"module"}